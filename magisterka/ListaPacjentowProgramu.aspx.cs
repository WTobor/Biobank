using magisterka.Classes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace magisterka
{
    public partial class ListaPacjentowProgramu : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            //brak dostępu niezalogowanemu użytkownikowi
            if (!String.IsNullOrEmpty((string)Session["id_uzytk"]))
            {
                string id_uzytk = (string)Session["id_uzytk"];

                //laborant nie może dodawać/edytować pacjentów
                if (DaneUzytk.ZwrocRoleUser(id_uzytk) == 3)
                {
                    DodajPacjenta.Visible = false;
                    GridViewPacjenci.AutoGenerateEditButton = false;
                }
            }
            else
            {
                Session["brak_dostepu"] = "true";
                Response.Redirect("Logowanie.aspx", true);
            }

            //wykona się tylko za pierwszym razem
            if (!IsPostBack)
            {
                string id_programu = (string)Session["id_programu"];
                string akronim = AkronimProgramu.SprawdzAkronim(id_programu);

                PoprAktual.Text = String.Empty;

                //gdy archiwalny program
                if (!String.IsNullOrEmpty((string)Session["archiwum"]))
                {
                    DodajPacjenta.Visible = false;
                    GridViewPacjenci.AutoGenerateDeleteButton = false;
                    GridViewPacjenci.AutoGenerateEditButton = false;
                    WybranyProgramLabel.Text = "Wybrany program archiwalny: " + akronim;
                }
                else
                {
                    WybranyProgramLabel.Text = "Wybrany program: " + akronim;
                }

                if (!String.IsNullOrEmpty((string)Session["blad_insert"]))
                {
                    if ((string)Session["blad_insert"] == "0")      //nie wystąpił błąd
                    {
                        PoprAktual.Text = "Poprawnie dodano nowego pacjenta";
                    }
                    else if ((string)Session["blad_insert"] == "1")     //wystąpił błąd
                    {
                        PoprAktual.Text = "Nie udało się dodać nowego pacjenta - spróbuj ponownie";
                    }
                    Session["blad_insert"] = String.Empty;      //usuwanie sesji (komunikat już się wyświetlił)
                }
            }
        }

        protected void DodajPacjenta_Click(object sender, EventArgs e)
        {
            Session["id_grupy"] = String.Empty;
            Response.Redirect("DodajPacjentaProgramu.aspx", true);
        }

        protected void Szukaj_Click(object sender, EventArgs e)
        {
            PoprAktual.Text = "";
            String warunek = String.Empty;
            // przeszukiwanie listy pacjentow
            if (!String.IsNullOrEmpty(TextBoxPesel.Text))
            {
                warunek += "AND PACJENT.pesel like '%" + TextBoxPesel.Text + "%'";
            }
            if (!String.IsNullOrEmpty(TextBoxImie.Text))
            {
                warunek += "AND PACJENT.imie like '%" + TextBoxImie.Text + "%'";
                
            }
            if (!String.IsNullOrEmpty(TextBoxNazwisko.Text))
            {
                warunek += "AND PACJENT.nazwisko like '%" + TextBoxNazwisko.Text + "%'";            
            }

            String query = "SELECT PACJENT.id_pacjent, PACJENT.pesel, PACJENT.imie, PACJENT.nazwisko, PACJ_PROJ.id_grupa_proj, GRUPA.nazwa_grupy FROM PACJENT INNER JOIN PACJ_PROJ ON PACJ_PROJ.id_pacjent = PACJENT.id_pacjent INNER JOIN GRUPA_PROJ ON GRUPA_PROJ.id_grupa_proj = PACJ_PROJ.id_grupa_proj INNER JOIN GRUPA ON GRUPA.id_grupa = GRUPA_PROJ.id_grupa WHERE (PACJ_PROJ.id_projektu = @id_projektu)" + warunek;

            SqlDataSource1.SelectCommand = query;
            GridViewPacjenci.DataBind();           
        }

        protected void GridViewPacjenci_SelectedIndexChanged(object sender, EventArgs e)
        {
            Session["id_pacjent"] = ((GridView)sender).SelectedValue.ToString();
            Response.Redirect("DlaPacjenta.aspx", true);
        }

        protected void GridViewPacjenci_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            String query = SqlDataSource1.DeleteCommand.ToString();
            query = query.Replace("@id_projektu", e.Keys[0].ToString());
            //zapisanie do logów
            Logi.LogFile(Session["login"] + " - SQL: " + query);
        }

        protected void GridViewPacjenci_RowEditing(object sender, GridViewEditEventArgs e)
        {
            GridViewPacjenci.DataBind();
        }

        protected void GridViewPacjenci_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            String query = SqlDataSource1.UpdateCommand.ToString();
            query = query.Replace("@id_pacjent", e.Keys[0].ToString());
            query = query.Replace("@pesel", e.NewValues[0].ToString());
            query = query.Replace("@imie", e.NewValues[1].ToString());
            query = query.Replace("@nazwisko", e.NewValues[2].ToString());
            //zapisanie do logów
            Logi.LogFile(Session["login"] + " - SQL: " + query);

            GridViewPacjenci.DataBind();
        }

        //sprawdzanie, czy wykonano aktualizację
        protected void Aktualizacja(Object source, SqlDataSourceStatusEventArgs e)
        {
            var akt = Aktualizuj.Aktualizacja(e.AffectedRows);
            PoprAktual.Text = akt.Item1;
            PoprAktual.ForeColor = System.Drawing.ColorTranslator.FromHtml(akt.Item2);
            //zapisanie do logów
            Logi.LogFile(Session["login"] + ": " + akt.Item1);
        }

   }
}