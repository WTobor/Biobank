using magisterka.Classes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace magisterka
{
    public partial class ListaProgramow1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            //brak dostępu niezalogowanemu użytkownikowi
            if (!String.IsNullOrEmpty((string)Session["id_uzytk"]))
            {
                string id_uzytk = (string)Session["id_uzytk"];

                //laborant nie może dodawać/edytować programów
                if (DaneUzytk.ZwrocRoleUser(id_uzytk) == 3)
                {
                    DodajProgram.Visible = false;
                    GridViewProgramyAut.AutoGenerateEditButton = false;
                    GridViewProgramyAut.AutoGenerateDeleteButton = false;
                    GridViewProgramyKoop.AutoGenerateEditButton = false;
                    GridViewProgramyKoop.AutoGenerateDeleteButton = false;
                }
            }
            else
            {
                Session["brak_dostepu"] = "true";
                Response.Redirect("Logowanie.aspx", true);
            }

            //wykona się tylko za pierwszym razem
            if (!IsPostBack)
            {
                Session["archiwum"] = String.Empty;
                Session["blad_insert"] = String.Empty;

                //gdy user, a nie Admin programu
                if (Session["id_uzytk"].ToString() == "1")
                {
                    GridViewProgramyAut.AutoGenerateDeleteButton = true;
                    GridViewProgramyKoop.AutoGenerateDeleteButton = true;
                }
            }
        }

        //AUT
        #region AUT

        protected void GridViewProgramyAut_RowEditing(object sender, GridViewEditEventArgs e)
        {
            GridViewProgramyAut.EditIndex = e.NewEditIndex;
            GridViewProgramyAut.DataBind();
        }

        protected void GridViewProgramyAut_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            GridViewProgramyAut.DataBind();
        }

        protected void GridViewProgramyAut_SelectedIndexChanged(object sender, EventArgs e)
        {
            //przekazywanie parametru do następnej strony
            Session["id_programu"] = ((GridView)sender).SelectedValue.ToString();
            Session["admin_programu"] = true;
            Response.Redirect("WybranyProgram.aspx", true);
        }

        protected void GridViewProgramyAut_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            String query = SqlDataSource2.DeleteCommand.ToString();
            query = query.Replace("@id_projektu", e.Keys[0].ToString());
            //zapisanie do logów
            Logi.LogFile(Session["login"] + " - SQL: " + query);
        }

        #endregion

        //KOOP
        #region Koop

        protected void GridViewProgramyKoop_RowEditing(object sender, GridViewEditEventArgs e)
        {
            GridViewProgramyKoop.EditIndex = e.NewEditIndex;
            GridViewProgramyKoop.DataBind();
        }


        protected void GridViewProgramyKoop_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            GridViewProgramyKoop.DataBind();
        }

        protected void GridViewProgramyKoop_SelectedIndexChanged(object sender, EventArgs e)
        {
            //przekazywanie parametru do następnej strony
            Session["id_programu"] = ((GridView)sender).SelectedValue.ToString();
            Session["admin_programu"] = false;
            Response.Redirect("WybranyProgram.aspx", true);
        }

        //dodanie programu
        protected void DodajProgram_Click(object sender, EventArgs e)
        {
            Response.Redirect("DodajProgram.aspx", true);
        }

        protected void Archiwum_Click(object sender, EventArgs e)
        {
            Response.Redirect("ListaProgramowArchiwum.aspx", true);
        }

        protected void GridViewProgramyKoop_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            String query = SqlDataSource2.DeleteCommand.ToString();
            //zapisanie do logów
            Logi.LogFile(Session["login"] + " - SQL: " + query);
        }

        #endregion

        //sprawdzanie, czy wykonano aktualizację
        protected void Aktualizacja(Object source, SqlDataSourceStatusEventArgs e)
        {
            var akt = Aktualizuj.Aktualizacja(e.AffectedRows);
            PoprAktual.Text = akt.Item1;
            PoprAktual.ForeColor = System.Drawing.ColorTranslator.FromHtml(akt.Item2);
            //zapisanie do logów
            Logi.LogFile(Session["login"] + ": " + akt.Item1);
        }

    }
}